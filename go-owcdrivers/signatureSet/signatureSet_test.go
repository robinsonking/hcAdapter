package signatureSet

import (
	"encoding/hex"
	"fmt"
	"testing"

	"github.com/blocktree/go-owcrypt"
)

func Test_ethSignature(t *testing.T) {
	/**---test 1-----**/
	//standard result:9e3813f1beb98607ed0cfa9199a41000ee12ac57f551d46ed944705a2cfad52e713d2ba16e48e58f4c427df185bd73b7142afed19c37752978acf7417aa517af01
	//	hash:=[]byte{0xce,0x99,0x90,0x1c,0x86,0xcb,0x50,0x0b,0xb1,0xd1,0x35,0xb6,0xab,0x6b,0xf1,0xd9,0x18,0xde,0x2a,0x7b,0xc5,0x54,0xc9,0xad,0xc2,0x5b,0x5a,0x09,0xd2,0x5c,0xf3,0x03}
	//prikey:=[]byte{0xc1,0xa1,0x19,0xf1,0x63,0xde,0xf0,0x72,0xf2,0x1a,0x1b,0x3b,0x96,0x05,0x2c,0x65,0x9d,0x71,0x77,0x3f,0x20,0x75,0xec,0x00,0x5d,0x4a,0xd8,0x49,0x24,0x71,0x7e,0x6a}
	//pubkey:=[]byte{0xD7,0xE4,0xC0,0x1B,0x63,0xAA,0xBE,0x17,0x75,0x89,0xFA,0x90,0x05,0xD6,0xC7,0xB1,0x18,0x22,0x83,0xC8,0x04,0xD8,0x43,0xF5,0xF4,0xC4,0xD6,0x16,0x17,0xBC,0x9F,0x23,0xFD,0x27,0xEB,0xDD,0x1E,0x67,0xFF,0x6C,0x93,0xA2,0x56,0x11,0xB5,0xC4,0xC3,0xA3,0xDD,0x7C,0x87,0xBD,0x6E,0x3E,0x63,0x62,0x71,0x7F,0x5E,0x67,0x0D,0xE3,0x66,0x32}
	/**----test 2-----**/
	//standard result:4d98f9b5ac76d314ba249a37d64de347a7f406132c8f7624b69c74b5badf9743668c89edfc1743cd8bd58fe935383dd8d4b72b25ac21112f66d45dbebcc7b1af00
	//hash:=[]byte{0xA4,0x4C,0x69,0x32,0x00,0xC3,0x7B,0x00,0x32,0x68,0x76,0x27,0x17,0x6E,0x41,0xDF,0xAC,0xC9,0x53,0xCC,0x77,0xEB,0x97,0x63,0x81,0xCD,0xB7,0xA6,0x6B,0x17,0x21,0x58}
	//prikey:=[]byte{0xBC,0xB9,0x71,0xDD,0x9A,0x73,0x1B,0x66,0xA4,0x25,0x51,0x7F,0x1F,0x02,0xC8,0xC3,0xAF,0x46,0xAF,0x74,0xFF,0x2F,0x62,0xF4,0xEF,0x21,0x14,0x70,0x41,0xC6,0xBB,0xA5}
	//pubkey:=[]byte{0x3D,0x91,0xE1,0xF9,0xC2,0x3E,0xAA,0x38,0x09,0x7C,0x87,0xAC,0xC0,0x6F,0x02,0xC9,0x57,0xDD,0x98,0x8F,0x0A,0x24,0x76,0x36,0xCD,0xDD,0x0F,0x91,0x43,0xA4,0xA9,0x5D,0x6A,0x08,0x19,0x58,0x6E,0xE3,0xF3,0xC7,0x31,0xA2,0x76,0xEF,0x74,0x2B,0xEF,0xB1,0xAE,0x61,0x5B,0xBF,0x48,0xCE,0x7D,0xD2,0xA6,0xE8,0x91,0x67,0x63,0x2F,0xE9,0x73}
	/**----test 3-----**/
	//standard result: a8064a1b1eab7f28bd0f26cdbdf2315e280b17eacab834bc27ab86e40307a9822e2b6bc2901fa439ce408dd13ff7ee930af51e47fc362bb8e44977e7009d1b5f00
	hash := []byte{0xA4, 0x4C, 0x69, 0x32, 0x00, 0xC3, 0x7B, 0x00, 0x32, 0x68, 0x76, 0x27, 0x17, 0x6E, 0x41, 0xDF, 0xAC, 0xC9, 0x53, 0xCC, 0x77, 0xEB, 0x97, 0x63, 0x81, 0xCD, 0xB7, 0xA6, 0x6B, 0x17, 0x21, 0x58}
	prikey := []byte{0xA8, 0xDE, 0xCB, 0xDF, 0x2A, 0x5C, 0x92, 0xF8, 0xD8, 0xFC, 0x4D, 0x53, 0x36, 0x7F, 0x3A, 0x21, 0x55, 0x84, 0xB0, 0xDD, 0xA9, 0x2E, 0xFC, 0x30, 0xBE, 0x89, 0x51, 0x44, 0xD3, 0xD5, 0x6F, 0x97}
	//pubkey :=[]byte{0x0B,0xF0,0xAE,0xD1,0x07,0x11,0xCC,0xE9,0xC0,0x7D,0x6F,0xFB,0xB4,0xCD,0x9D,0x93,0xA0,0x0B,0xF5,0x3A,0x97,0x22,0x08,0x1E,0x5A,0x1A,0x6C,0xB5,0x94,0xB0,0xF0,0x4E,0xAF,0x97,0x8B,0x8F,0x7B,0x7F,0xCA,0xFE,0xEF,0x85,0xA3,0x6F,0xBA,0xF6,0x6C,0x6F,0xA0,0xEA,0xC0,0x5D,0x46,0x8E,0x83,0x41,0x80,0xDE,0x34,0xCB,0x74,0xDD,0x45,0xCA}
	/**-----test 4-----**/
	//hash:=[]byte{0x23,0x87,0x14,0x9b,0x9d,0x9e,0x58,0x75,0x2b,0x7b,0xf8,0xc5,0x69,0x52,0x21,0xd9,0xfe,0xb7,0x27,0x4f}
	//hash:=[]byte{0x80,0xa1,0x2d,0x64,0x64,0xfa,0x73,0x47,0xab,0x85,0x41,0x1a,0x4c,0x2b,0xe0,0x6b,0xfa,0xd4,0x3c,0x1a,0xb6,0x69,0x13,0xd5,0x0e,0x5a,0x12,0x0c,0x9d,0x2b,0xdb,0xde}
	//prikey := []byte{226, 188, 53, 199, 56, 81, 55, 120, 229, 100, 198, 237, 124, 61, 112, 10, 13, 182, 115, 9, 204, 194, 126, 244, 0, 18, 136, 109, 0, 113, 139, 157}
	sig, err := EthSignature(prikey, hash)
	if err != owcrypt.SUCCESS {
		t.Error("tron sign fail")
	} else {
		fmt.Println("tron sign success, signature result:", hex.EncodeToString(sig))
	}
}

func Test_icxSign(t *testing.T) {
	/**---test 1-----**/
	//standard result:9e3813f1beb98607ed0cfa9199a41000ee12ac57f551d46ed944705a2cfad52e713d2ba16e48e58f4c427df185bd73b7142afed19c37752978acf7417aa517af01
	//	hash:=[]byte{0xce,0x99,0x90,0x1c,0x86,0xcb,0x50,0x0b,0xb1,0xd1,0x35,0xb6,0xab,0x6b,0xf1,0xd9,0x18,0xde,0x2a,0x7b,0xc5,0x54,0xc9,0xad,0xc2,0x5b,0x5a,0x09,0xd2,0x5c,0xf3,0x03}
	//prikey:=[]byte{0xc1,0xa1,0x19,0xf1,0x63,0xde,0xf0,0x72,0xf2,0x1a,0x1b,0x3b,0x96,0x05,0x2c,0x65,0x9d,0x71,0x77,0x3f,0x20,0x75,0xec,0x00,0x5d,0x4a,0xd8,0x49,0x24,0x71,0x7e,0x6a}
	//pubkey:=[]byte{0xD7,0xE4,0xC0,0x1B,0x63,0xAA,0xBE,0x17,0x75,0x89,0xFA,0x90,0x05,0xD6,0xC7,0xB1,0x18,0x22,0x83,0xC8,0x04,0xD8,0x43,0xF5,0xF4,0xC4,0xD6,0x16,0x17,0xBC,0x9F,0x23,0xFD,0x27,0xEB,0xDD,0x1E,0x67,0xFF,0x6C,0x93,0xA2,0x56,0x11,0xB5,0xC4,0xC3,0xA3,0xDD,0x7C,0x87,0xBD,0x6E,0x3E,0x63,0x62,0x71,0x7F,0x5E,0x67,0x0D,0xE3,0x66,0x32}
	/**----test 2-----**/
	//standard result:4d98f9b5ac76d314ba249a37d64de347a7f406132c8f7624b69c74b5badf9743668c89edfc1743cd8bd58fe935383dd8d4b72b25ac21112f66d45dbebcc7b1af00
	//hash:=[]byte{0xA4,0x4C,0x69,0x32,0x00,0xC3,0x7B,0x00,0x32,0x68,0x76,0x27,0x17,0x6E,0x41,0xDF,0xAC,0xC9,0x53,0xCC,0x77,0xEB,0x97,0x63,0x81,0xCD,0xB7,0xA6,0x6B,0x17,0x21,0x58}
	//prikey:=[]byte{0xBC,0xB9,0x71,0xDD,0x9A,0x73,0x1B,0x66,0xA4,0x25,0x51,0x7F,0x1F,0x02,0xC8,0xC3,0xAF,0x46,0xAF,0x74,0xFF,0x2F,0x62,0xF4,0xEF,0x21,0x14,0x70,0x41,0xC6,0xBB,0xA5}
	//pubkey:=[]byte{0x3D,0x91,0xE1,0xF9,0xC2,0x3E,0xAA,0x38,0x09,0x7C,0x87,0xAC,0xC0,0x6F,0x02,0xC9,0x57,0xDD,0x98,0x8F,0x0A,0x24,0x76,0x36,0xCD,0xDD,0x0F,0x91,0x43,0xA4,0xA9,0x5D,0x6A,0x08,0x19,0x58,0x6E,0xE3,0xF3,0xC7,0x31,0xA2,0x76,0xEF,0x74,0x2B,0xEF,0xB1,0xAE,0x61,0x5B,0xBF,0x48,0xCE,0x7D,0xD2,0xA6,0xE8,0x91,0x67,0x63,0x2F,0xE9,0x73}
	/**----test 3-----**/
	//standard result: a8064a1b1eab7f28bd0f26cdbdf2315e280b17eacab834bc27ab86e40307a9822e2b6bc2901fa439ce408dd13ff7ee930af51e47fc362bb8e44977e7009d1b5f00
	hash := []byte{0xA4, 0x4C, 0x69, 0x32, 0x00, 0xC3, 0x7B, 0x00, 0x32, 0x68, 0x76, 0x27, 0x17, 0x6E, 0x41, 0xDF, 0xAC, 0xC9, 0x53, 0xCC, 0x77, 0xEB, 0x97, 0x63, 0x81, 0xCD, 0xB7, 0xA6, 0x6B, 0x17, 0x21, 0x58}
	prikey := []byte{0xA8, 0xDE, 0xCB, 0xDF, 0x2A, 0x5C, 0x92, 0xF8, 0xD8, 0xFC, 0x4D, 0x53, 0x36, 0x7F, 0x3A, 0x21, 0x55, 0x84, 0xB0, 0xDD, 0xA9, 0x2E, 0xFC, 0x30, 0xBE, 0x89, 0x51, 0x44, 0xD3, 0xD5, 0x6F, 0x97}
	//pubkey :=[]byte{0x0B,0xF0,0xAE,0xD1,0x07,0x11,0xCC,0xE9,0xC0,0x7D,0x6F,0xFB,0xB4,0xCD,0x9D,0x93,0xA0,0x0B,0xF5,0x3A,0x97,0x22,0x08,0x1E,0x5A,0x1A,0x6C,0xB5,0x94,0xB0,0xF0,0x4E,0xAF,0x97,0x8B,0x8F,0x7B,0x7F,0xCA,0xFE,0xEF,0x85,0xA3,0x6F,0xBA,0xF6,0x6C,0x6F,0xA0,0xEA,0xC0,0x5D,0x46,0x8E,0x83,0x41,0x80,0xDE,0x34,0xCB,0x74,0xDD,0x45,0xCA}
	/**-----test 4-----**/
	//hash:=[]byte{0x23,0x87,0x14,0x9b,0x9d,0x9e,0x58,0x75,0x2b,0x7b,0xf8,0xc5,0x69,0x52,0x21,0xd9,0xfe,0xb7,0x27,0x4f}
	//hash:=[]byte{0x80,0xa1,0x2d,0x64,0x64,0xfa,0x73,0x47,0xab,0x85,0x41,0x1a,0x4c,0x2b,0xe0,0x6b,0xfa,0xd4,0x3c,0x1a,0xb6,0x69,0x13,0xd5,0x0e,0x5a,0x12,0x0c,0x9d,0x2b,0xdb,0xde}
	//prikey := []byte{226, 188, 53, 199, 56, 81, 55, 120, 229, 100, 198, 237, 124, 61, 112, 10, 13, 182, 115, 9, 204, 194, 126, 244, 0, 18, 136, 109, 0, 113, 139, 157}
	sig, err := IcxSignature(prikey, hash)
	if err != owcrypt.SUCCESS {
		t.Error("ICX sign fail")
	} else {
		fmt.Println("ICX sign success, signature result:", hex.EncodeToString(sig))
	}
}

func Test_nasSignature(t *testing.T) {
	/**---test 1-----**/
	//standard result:9e3813f1beb98607ed0cfa9199a41000ee12ac57f551d46ed944705a2cfad52e713d2ba16e48e58f4c427df185bd73b7142afed19c37752978acf7417aa517af01
	//	hash:=[]byte{0xce,0x99,0x90,0x1c,0x86,0xcb,0x50,0x0b,0xb1,0xd1,0x35,0xb6,0xab,0x6b,0xf1,0xd9,0x18,0xde,0x2a,0x7b,0xc5,0x54,0xc9,0xad,0xc2,0x5b,0x5a,0x09,0xd2,0x5c,0xf3,0x03}
	//prikey:=[]byte{0xc1,0xa1,0x19,0xf1,0x63,0xde,0xf0,0x72,0xf2,0x1a,0x1b,0x3b,0x96,0x05,0x2c,0x65,0x9d,0x71,0x77,0x3f,0x20,0x75,0xec,0x00,0x5d,0x4a,0xd8,0x49,0x24,0x71,0x7e,0x6a}
	//pubkey:=[]byte{0xD7,0xE4,0xC0,0x1B,0x63,0xAA,0xBE,0x17,0x75,0x89,0xFA,0x90,0x05,0xD6,0xC7,0xB1,0x18,0x22,0x83,0xC8,0x04,0xD8,0x43,0xF5,0xF4,0xC4,0xD6,0x16,0x17,0xBC,0x9F,0x23,0xFD,0x27,0xEB,0xDD,0x1E,0x67,0xFF,0x6C,0x93,0xA2,0x56,0x11,0xB5,0xC4,0xC3,0xA3,0xDD,0x7C,0x87,0xBD,0x6E,0x3E,0x63,0x62,0x71,0x7F,0x5E,0x67,0x0D,0xE3,0x66,0x32}
	/**----test 2-----**/
	//standard result:4d98f9b5ac76d314ba249a37d64de347a7f406132c8f7624b69c74b5badf9743668c89edfc1743cd8bd58fe935383dd8d4b72b25ac21112f66d45dbebcc7b1af00
	//hash:=[]byte{0xA4,0x4C,0x69,0x32,0x00,0xC3,0x7B,0x00,0x32,0x68,0x76,0x27,0x17,0x6E,0x41,0xDF,0xAC,0xC9,0x53,0xCC,0x77,0xEB,0x97,0x63,0x81,0xCD,0xB7,0xA6,0x6B,0x17,0x21,0x58}
	//prikey:=[]byte{0xBC,0xB9,0x71,0xDD,0x9A,0x73,0x1B,0x66,0xA4,0x25,0x51,0x7F,0x1F,0x02,0xC8,0xC3,0xAF,0x46,0xAF,0x74,0xFF,0x2F,0x62,0xF4,0xEF,0x21,0x14,0x70,0x41,0xC6,0xBB,0xA5}
	//pubkey:=[]byte{0x3D,0x91,0xE1,0xF9,0xC2,0x3E,0xAA,0x38,0x09,0x7C,0x87,0xAC,0xC0,0x6F,0x02,0xC9,0x57,0xDD,0x98,0x8F,0x0A,0x24,0x76,0x36,0xCD,0xDD,0x0F,0x91,0x43,0xA4,0xA9,0x5D,0x6A,0x08,0x19,0x58,0x6E,0xE3,0xF3,0xC7,0x31,0xA2,0x76,0xEF,0x74,0x2B,0xEF,0xB1,0xAE,0x61,0x5B,0xBF,0x48,0xCE,0x7D,0xD2,0xA6,0xE8,0x91,0x67,0x63,0x2F,0xE9,0x73}
	/**----test 3-----**/
	//standard result: a8064a1b1eab7f28bd0f26cdbdf2315e280b17eacab834bc27ab86e40307a9822e2b6bc2901fa439ce408dd13ff7ee930af51e47fc362bb8e44977e7009d1b5f00
	hash := []byte{0xA4, 0x4C, 0x69, 0x32, 0x00, 0xC3, 0x7B, 0x00, 0x32, 0x68, 0x76, 0x27, 0x17, 0x6E, 0x41, 0xDF, 0xAC, 0xC9, 0x53, 0xCC, 0x77, 0xEB, 0x97, 0x63, 0x81, 0xCD, 0xB7, 0xA6, 0x6B, 0x17, 0x21, 0x58}
	prikey := []byte{0xA8, 0xDE, 0xCB, 0xDF, 0x2A, 0x5C, 0x92, 0xF8, 0xD8, 0xFC, 0x4D, 0x53, 0x36, 0x7F, 0x3A, 0x21, 0x55, 0x84, 0xB0, 0xDD, 0xA9, 0x2E, 0xFC, 0x30, 0xBE, 0x89, 0x51, 0x44, 0xD3, 0xD5, 0x6F, 0x97}
	//pubkey :=[]byte{0x0B,0xF0,0xAE,0xD1,0x07,0x11,0xCC,0xE9,0xC0,0x7D,0x6F,0xFB,0xB4,0xCD,0x9D,0x93,0xA0,0x0B,0xF5,0x3A,0x97,0x22,0x08,0x1E,0x5A,0x1A,0x6C,0xB5,0x94,0xB0,0xF0,0x4E,0xAF,0x97,0x8B,0x8F,0x7B,0x7F,0xCA,0xFE,0xEF,0x85,0xA3,0x6F,0xBA,0xF6,0x6C,0x6F,0xA0,0xEA,0xC0,0x5D,0x46,0x8E,0x83,0x41,0x80,0xDE,0x34,0xCB,0x74,0xDD,0x45,0xCA}
	/**-----test 4-----**/
	//hash:=[]byte{0x23,0x87,0x14,0x9b,0x9d,0x9e,0x58,0x75,0x2b,0x7b,0xf8,0xc5,0x69,0x52,0x21,0xd9,0xfe,0xb7,0x27,0x4f}
	//hash:=[]byte{0x80,0xa1,0x2d,0x64,0x64,0xfa,0x73,0x47,0xab,0x85,0x41,0x1a,0x4c,0x2b,0xe0,0x6b,0xfa,0xd4,0x3c,0x1a,0xb6,0x69,0x13,0xd5,0x0e,0x5a,0x12,0x0c,0x9d,0x2b,0xdb,0xde}
	//prikey := []byte{226, 188, 53, 199, 56, 81, 55, 120, 229, 100, 198, 237, 124, 61, 112, 10, 13, 182, 115, 9, 204, 194, 126, 244, 0, 18, 136, 109, 0, 113, 139, 157}
	sig, err := NasSignature(prikey, hash)
	if err != owcrypt.SUCCESS {
		t.Error("NAS sign fail")
	} else {
		fmt.Println("NAS sign success, signature result:", hex.EncodeToString(sig))
	}
}

func Test_tronSignature(t *testing.T) {
	/**---test 1-----**/
	//standard result:9e3813f1beb98607ed0cfa9199a41000ee12ac57f551d46ed944705a2cfad52e713d2ba16e48e58f4c427df185bd73b7142afed19c37752978acf7417aa517af01
	//	hash:=[]byte{0xce,0x99,0x90,0x1c,0x86,0xcb,0x50,0x0b,0xb1,0xd1,0x35,0xb6,0xab,0x6b,0xf1,0xd9,0x18,0xde,0x2a,0x7b,0xc5,0x54,0xc9,0xad,0xc2,0x5b,0x5a,0x09,0xd2,0x5c,0xf3,0x03}
	//prikey:=[]byte{0xc1,0xa1,0x19,0xf1,0x63,0xde,0xf0,0x72,0xf2,0x1a,0x1b,0x3b,0x96,0x05,0x2c,0x65,0x9d,0x71,0x77,0x3f,0x20,0x75,0xec,0x00,0x5d,0x4a,0xd8,0x49,0x24,0x71,0x7e,0x6a}
	//pubkey:=[]byte{0xD7,0xE4,0xC0,0x1B,0x63,0xAA,0xBE,0x17,0x75,0x89,0xFA,0x90,0x05,0xD6,0xC7,0xB1,0x18,0x22,0x83,0xC8,0x04,0xD8,0x43,0xF5,0xF4,0xC4,0xD6,0x16,0x17,0xBC,0x9F,0x23,0xFD,0x27,0xEB,0xDD,0x1E,0x67,0xFF,0x6C,0x93,0xA2,0x56,0x11,0xB5,0xC4,0xC3,0xA3,0xDD,0x7C,0x87,0xBD,0x6E,0x3E,0x63,0x62,0x71,0x7F,0x5E,0x67,0x0D,0xE3,0x66,0x32}
	/**----test 2-----**/
	//standard result:4d98f9b5ac76d314ba249a37d64de347a7f406132c8f7624b69c74b5badf9743668c89edfc1743cd8bd58fe935383dd8d4b72b25ac21112f66d45dbebcc7b1af00
	//hash:=[]byte{0xA4,0x4C,0x69,0x32,0x00,0xC3,0x7B,0x00,0x32,0x68,0x76,0x27,0x17,0x6E,0x41,0xDF,0xAC,0xC9,0x53,0xCC,0x77,0xEB,0x97,0x63,0x81,0xCD,0xB7,0xA6,0x6B,0x17,0x21,0x58}
	//prikey:=[]byte{0xBC,0xB9,0x71,0xDD,0x9A,0x73,0x1B,0x66,0xA4,0x25,0x51,0x7F,0x1F,0x02,0xC8,0xC3,0xAF,0x46,0xAF,0x74,0xFF,0x2F,0x62,0xF4,0xEF,0x21,0x14,0x70,0x41,0xC6,0xBB,0xA5}
	//pubkey:=[]byte{0x3D,0x91,0xE1,0xF9,0xC2,0x3E,0xAA,0x38,0x09,0x7C,0x87,0xAC,0xC0,0x6F,0x02,0xC9,0x57,0xDD,0x98,0x8F,0x0A,0x24,0x76,0x36,0xCD,0xDD,0x0F,0x91,0x43,0xA4,0xA9,0x5D,0x6A,0x08,0x19,0x58,0x6E,0xE3,0xF3,0xC7,0x31,0xA2,0x76,0xEF,0x74,0x2B,0xEF,0xB1,0xAE,0x61,0x5B,0xBF,0x48,0xCE,0x7D,0xD2,0xA6,0xE8,0x91,0x67,0x63,0x2F,0xE9,0x73}
	/**----test 3-----**/
	//standard result: a8064a1b1eab7f28bd0f26cdbdf2315e280b17eacab834bc27ab86e40307a9822e2b6bc2901fa439ce408dd13ff7ee930af51e47fc362bb8e44977e7009d1b5f00
	hash := []byte{0xA4, 0x4C, 0x69, 0x32, 0x00, 0xC3, 0x7B, 0x00, 0x32, 0x68, 0x76, 0x27, 0x17, 0x6E, 0x41, 0xDF, 0xAC, 0xC9, 0x53, 0xCC, 0x77, 0xEB, 0x97, 0x63, 0x81, 0xCD, 0xB7, 0xA6, 0x6B, 0x17, 0x21, 0x58}
	prikey := []byte{0xA8, 0xDE, 0xCB, 0xDF, 0x2A, 0x5C, 0x92, 0xF8, 0xD8, 0xFC, 0x4D, 0x53, 0x36, 0x7F, 0x3A, 0x21, 0x55, 0x84, 0xB0, 0xDD, 0xA9, 0x2E, 0xFC, 0x30, 0xBE, 0x89, 0x51, 0x44, 0xD3, 0xD5, 0x6F, 0x97}
	//pubkey :=[]byte{0x0B,0xF0,0xAE,0xD1,0x07,0x11,0xCC,0xE9,0xC0,0x7D,0x6F,0xFB,0xB4,0xCD,0x9D,0x93,0xA0,0x0B,0xF5,0x3A,0x97,0x22,0x08,0x1E,0x5A,0x1A,0x6C,0xB5,0x94,0xB0,0xF0,0x4E,0xAF,0x97,0x8B,0x8F,0x7B,0x7F,0xCA,0xFE,0xEF,0x85,0xA3,0x6F,0xBA,0xF6,0x6C,0x6F,0xA0,0xEA,0xC0,0x5D,0x46,0x8E,0x83,0x41,0x80,0xDE,0x34,0xCB,0x74,0xDD,0x45,0xCA}
	/**-----test 4-----**/
	//hash:=[]byte{0x23,0x87,0x14,0x9b,0x9d,0x9e,0x58,0x75,0x2b,0x7b,0xf8,0xc5,0x69,0x52,0x21,0xd9,0xfe,0xb7,0x27,0x4f}
	//hash:=[]byte{0x80,0xa1,0x2d,0x64,0x64,0xfa,0x73,0x47,0xab,0x85,0x41,0x1a,0x4c,0x2b,0xe0,0x6b,0xfa,0xd4,0x3c,0x1a,0xb6,0x69,0x13,0xd5,0x0e,0x5a,0x12,0x0c,0x9d,0x2b,0xdb,0xde}
	//prikey := []byte{226, 188, 53, 199, 56, 81, 55, 120, 229, 100, 198, 237, 124, 61, 112, 10, 13, 182, 115, 9, 204, 194, 126, 244, 0, 18, 136, 109, 0, 113, 139, 157}
	sig, err := TronSignature(prikey, hash)
	if err != owcrypt.SUCCESS {
		t.Error("tron sign fail")
	} else {
		fmt.Println("tron sign success, signature result:", hex.EncodeToString(sig))
	}
}
