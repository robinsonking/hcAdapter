package vergeTransaction

import (
	"encoding/hex"
	"fmt"
	"testing"
)

func Test_send(t *testing.T) {
	// 该案例参照链上交易 c23c4f9e8d5974a0de6b01af7e23875f8e48c93cfad5ff29723458e9df063014 进行构建
	// 如果希望得到与链上完全一致的结果，应在txStruct.go的第28行添加如下代码
	//timeuntil = 1558240781

	txid := "0c3fa57bd52ead464f40e761cb0a033bdf42fc06d80d02abbd17825bcede5b8f"
	vout := uint32(0)
	lockScript := "76a91457145147e7913e1bc41098efdd01a47ce2d1f3da88ac"

	to1 := "DGoZWrrKsiB7A3gCjpAuGXHYFS4im68zzV"
	amount1 := uint64(27532627216595)
	to2 := "DJx3PiAinkN8MRBhdoLzbHYTxU7xgSwq9d"
	amount2 := uint64(299938900000)

	// 构建输入
	vins := []Vin{Vin{txid, vout, lockScript}}
	// 构建输出
	vouts := []Vout{Vout{to1, amount1}, Vout{to2, amount2}}

	//其他参数
	lockTime := uint32(0)

	// XVG参数
	timeInterval := uint32(21600)

	// 构建交易单和待签哈希
	emptyTrans, hashes, err := CreateEmptyTransactionAndHash(vins, vouts, lockTime, timeInterval)
	if err != nil {
		t.Error("create failed!")
	} else {
		fmt.Println("空交易单:\n", emptyTrans)
		fmt.Println("待签哈希:\n", hashes[0])
	}

	// 对交易单签名
	prikey := []byte{0x84, 0x98, 0x23, 0xd2, 0x2d, 0x81, 0xe4, 0x9e, 0xb7, 0x19, 0x06, 0x6b, 0xcf, 0x7e, 0xd1, 0x73, 0xe6, 0x09, 0x48, 0x22, 0xb0, 0xea, 0x4e, 0x79, 0x3f, 0x1d, 0x85, 0x97, 0xa5, 0x06, 0x0d, 0x27}
	signature, err := SignTransaction(hashes[0], prikey)
	if err != nil {
		t.Error("failed to sign!")
	} else {
		// only for test
		signature = []byte{0xed, 0x1b, 0xd0, 0x0b, 0xbb, 0xf5, 0xf5, 0x08, 0x63, 0x61, 0x09, 0x5b, 0x3d, 0x0a, 0xfd, 0x10, 0x31, 0x87, 0xa8, 0xe0, 0xdd, 0xea, 0x73, 0xcb, 0x0a, 0x8c, 0xf6, 0xa6, 0x9e, 0x67, 0xd8, 0xca, 0x62, 0xac, 0x1c, 0x2c, 0xe2, 0x63, 0x2f, 0xb7, 0xce, 0xea, 0x66, 0x32, 0x4b, 0xd6, 0x43, 0x93, 0x3e, 0xe2, 0xd8, 0xa2, 0xed, 0x5e, 0xab, 0xee, 0xdd, 0x14, 0x99, 0xc1, 0xd3, 0xc5, 0x30, 0x8e}
		fmt.Println("签名结果:\n", hex.EncodeToString(signature))
	}

	// 验证合并
	pubkey := []byte{0x02, 0x40, 0x65, 0x3c, 0x17, 0xb3, 0x31, 0xf7, 0x64, 0x34, 0x22, 0x40, 0x8f, 0x3a, 0x2e, 0x37, 0x3b, 0xc4, 0x93, 0x15, 0x71, 0xc6, 0x27, 0xdd, 0x4c, 0xd9, 0xbf, 0x96, 0x43, 0x82, 0xfd, 0xe1, 0xc8}

	//构建签名
	sigPubs := []SigPub{SigPub{pubkey, signature}}

	pass, signedTrans, err := VerifyAndCombineTransaction(emptyTrans, sigPubs)
	if err != nil {
		t.Error("failed to verify!")
	} else {
		if pass != true {
			fmt.Println("verify failed!")
		} else {
			fmt.Println("待发送交易单:\n", signedTrans)
		}
	}
}
